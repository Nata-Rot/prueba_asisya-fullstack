name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '18.x'

jobs:
  # Backend Build and Test
  backend-test:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_USER: postgres
          POSTGRES_DB: AsisyaDb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore backend-dotnet/AsisyaApi.sln

    - name: Build solution
      run: dotnet build backend-dotnet/AsisyaApi.sln --no-restore --configuration Release

    - name: Run unit tests
      run: dotnet test backend-dotnet/AsisyaApi.Tests --no-build --configuration Release --logger trx --collect:"XPlat Code Coverage"
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=AsisyaDb;Username=postgres;Password=postgres123"

    - name: Publish test results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Backend Test Results
        path: '**/*.trx'
        reporter: dotnet-trx

    # Code Quality Analysis
    - name: Run code analysis
      run: dotnet format backend-dotnet/AsisyaApi.sln --verify-no-changes --verbosity diagnostic

  # Backend Docker Build
  backend-docker:
    name: Backend Docker Build
    runs-on: ubuntu-latest
    needs: backend-test
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: asisya/api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend-dotnet
        file: ./backend-dotnet/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Frontend Build and Test (will be implemented later)
  frontend-test:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    if: false  # Disabled until Angular app is created

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend-angular/package-lock.json

    - name: Install dependencies
      run: npm ci
      working-directory: frontend-angular

    - name: Run linting
      run: npm run lint
      working-directory: frontend-angular

    - name: Run tests
      run: npm run test:ci
      working-directory: frontend-angular

    - name: Build application
      run: npm run build:prod
      working-directory: frontend-angular

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: backend-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './backend-dotnet'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deployment (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-docker, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        echo "This would typically involve:"
        echo "- Updating Docker Compose files"
        echo "- Rolling out to container orchestration platform"
        echo "- Running database migrations"
        echo "- Health checks"